#cloud-config
autoinstall:
  version: 1
  timezone: "{{TIMEZONE}}"
  storage:
    layout:
      name: lvm
      sizing-policy: all
      password: "{{LUKS_PASSWORD}}"
  locale: "{{LOCALE}}"
  keyboard:
    layout:"{{KEYBOARD_LAYOUT}}"
    variant: ""
  refresh-installer:
    update: false
  apt:
    preserve_sources_list: true
  source:
    id: ubuntu-desktop
  packages: []
  snaps: []
  updates: security
  shutdown: poweroff
  late-commands:
    # Create directory structure
    - mkdir -p /target/opt/setup/ansible

    # Create the first boot script
    - |
      cat > /target/opt/setup/first-boot.sh << 'EOF'
      #!/bin/bash

      # Create a log file
      LOG_FILE="/var/log/first-boot.log"
      touch $LOG_FILE
      chmod 644 $LOG_FILE

      echo "$(date): First boot script started" >> $LOG_FILE

      # Function to check internet connectivity - single attempt
      echo "$(date): Checking internet connection..." >> $LOG_FILE
      if ! ping -c 1 8.8.8.8 > /dev/null 2>&1; then
          echo "$(date): No internet connection. Exiting script." >> $LOG_FILE
          exit 1
      fi

      echo "$(date): Internet connection established" >> $LOG_FILE

      # Send notification to user
      notify-send "AUTOMATIC SETUP HAS BEGUN" "We'll notify you once it's finished" --expire-time 20000 --app-name "Automatic Setup" --category info --urgency normal

      # Update and install required packages
      echo "$(date): Updating package lists..." >> $LOG_FILE
      apt-get update >> $LOG_FILE 2>&1

      echo "$(date): Installing curl, ansible, and ansible-galaxy modules..." >> $LOG_FILE
      apt-get install -y curl ansible >> $LOG_FILE 2>&1

      # Install required Ansible collections
      echo "$(date): Installing required Ansible collections..." >> $LOG_FILE
      ansible-galaxy collection install community.general >> $LOG_FILE 2>&1

      # Run the Ansible playbook
      echo "$(date): Running Ansible playbook..." >> $LOG_FILE
      ansible-playbook /opt/setup/ansible/setup_playbook.yml -c local >> $LOG_FILE 2>&1

      echo "$(date): First boot script completed" >> $LOG_FILE

      # Remove the startup service to prevent running again on next boot
      systemctl disable first-boot.service

      # Send notification to user
      notify-send "AUTOMATIC SETUP HAS FINISHED" "Your system is ready!" --expire-time 20000 --app-name "Automatic Setup" --category info --urgency normal

      exit 0
      EOF

    # Make the script executable
    - chmod +x /target/opt/setup/first-boot.sh

    # Create the Ansible playbook
    - |
      cat > /target/opt/setup/ansible/setup_playbook.yml << 'EOF'
      ---
      - name: Setup Ubuntu workstation
        hosts: localhost
        become: yes
        tasks:
          - name: Download Google Chrome
            get_url:
              url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
              dest: /tmp/google-chrome-stable_current_amd64.deb
              mode: '0644'
            register: chrome_download

          - name: Install Google Chrome
            apt:
              deb: /tmp/google-chrome-stable_current_amd64.deb
              state: present
            when: chrome_download is succeeded

          - name: Create Chrome extensions directory
            file:
              path: /opt/google/chrome/extensions/
              state: directory
              mode: '0755'
              recurse: yes

          - name: Create Chrome extension JSON file
            copy:
              content: |
                {
                "external_update_url": "https://clients2.google.com/service/update2/crx"
                }
              dest: /opt/google/chrome/extensions/callobklhcbilhphinckomhgkigmfocg.json
              mode: '0755'

          - name: Download and run JumpCloud install script
            shell: |
              curl --tlsv1.2 --silent --show-error --header 'x-connect-key: <JUMPCLOUD_TOKEN>' https://kickstart.jumpcloud.com/Kickstart | bash
            args:
              executable: /bin/bash

          - name: Download VS Code
            get_url:
              url: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
              dest: /tmp/vscode.deb
              mode: '0644'
            register: vscode_download

          - name: Install Slack Desktop
            command: snap install slack --classic
            ignore_errors: yes

          - name: Install VS Code
            apt:
              deb: /tmp/vscode.deb
              state: present
            when: vscode_download is succeeded

          - name: Remove Firefox snap
            command: snap remove firefox
            ignore_errors: yes

          - name: Remove Thunderbird snap
            command: snap remove thunderbird
            ignore_errors: yes

          - name: Ensure unattended-upgrades is installed
            apt:
              name: unattended-upgrades
              state: present
              update_cache: yes

          - name: Enable unattended-upgrades
            command: dpkg-reconfigure -f noninteractive unattended-upgrades

          - name: Attach Ubuntu to Ubuntu Pro
            shell: |
              pro attach <UBUNTU_PRO_TOKEN>
            register: pro_attach
            failed_when: "'is already attached' not in pro_attach.stdout and pro_attach.rc != 0"
            changed_when: "'is already attached' not in pro_attach.stdout"

          - name: Enable Ubuntu Pro security services
            shell: |
              pro enable esm-infra
              pro enable esm-apps
              pro enable livepatch --assume-yes
            when: pro_attach is succeeded

          - name: Install Landscape client
            apt:
              name: landscape-client
              state: present
              update_cache: yes

          - name: Configure and register Landscape client
            command: >
              landscape-config
              --computer-title "<COMPUTER_TITLE>"
              --account-name "<LANDSCAPE_ACCOUNT_NAME>"
              --url <LANDSCAPE_URL>
              --ping-url <LANDSCAPE_URL>/ping
              --silent
            args:
              creates: /etc/landscape/client.conf
      EOF

    # Create systemd service file
    - |
      cat > /target/etc/systemd/system/first-boot.service << 'EOF'
      [Unit]
      Description=First Boot Configuration
      After=multi-user.target
      StartLimitIntervalSec=0

      [Service]
      Type=simple
      ExecStart=/bin/bash /opt/setup/first-boot.sh
      Restart=on-failure
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
      EOF

    # Enable the service
    - curtin in-target --target=/target systemctl enable first-boot.service
